*tbufferline.txt*

===============================================================================
CONTENTS                                                   *tbufferline-contents*

    1. Introduction........................... |tbufferline-intro|
    2. Usage.................................. |tbufferline-usage|
         Enabling and disabling............... |tbufferline-enabling-disabling|
         Mappings............................. |tbufferline-mappings|
         Functions............................ |tbufferline-functions|
         Variables............................ |tbufferline-variables|
    3. License................................ |tbufferline-license|
    4. Credits................................ |tbufferline-credits|


===============================================================================
1. Introduction                                               *tbufferline-intro*

tbufferline sets up a status line that displays the currently open buffers.
File buffers are displayed on the left, terminal buffers on the right.
Displayed buffers are prefixed with consecutively increasing numbers that can
be used to target them using the <Plug> mappings; see |tbufferline-mappings|.

Right now the only way to customize the statusline at all is by changing the
highlight groups StatusLine (for the current buffer) and StatusLineNC (for
everything else).

===============================================================================
2. Usage                                                      *tbufferline-usage*

-------------------------------------------------------------------------------
Enabling and disabling                           *tbufferline-enabling-disabling*

tbufferline is disabled by default. The following commands are available:

:TbufferlineEnable~
:TbufferlineDisable~
:TbufferlineToggle~

Their function should be self-explanatory; the only thing worth mentioning is
that all statuslines are reset to their default value when tbufferline is
disabled.

To activate tbufferline on startup, set g:tbufferline_enable_on_startup to 1
in init.vim.
>
      let g:tbufferline_enable_on_startup = 1
<

-------------------------------------------------------------------------------
Mappings                                                   *tbufferline-mappings*

tbufferline provides several convenience mappings to take advantage of the
consecutive numbering on the statusline. They can be used as follows:
>
  nmap ? <Plug>TbufferlineBuffer
<
Available mappings are:

  -----------------------------------------------------------------------------
  <Plug>tbufferline#Buffer        | When preceded by a count, switch to the
                                  | corresponding buffer in tbufferline's
                                  | numbering
  <Plug>tbufferline#SplitBuffer   | Likewise, but open in a split
  <Plug>tbufferline#VSplitBuffer  | Likewise, but open in a vertical split
  <Plug>tbufferline#StepForward   | Switch to the buffer following the current
                                  | one in tbufferline's numbering
  <Plug>tbufferline#StepBack      | Likewise, but the preceding buffer

-------------------------------------------------------------------------------
Functions                                                 *tbufferline-functions*

tbufferline#BufNumMap()~
  Returns a list whose ith entry is the buffer number (using vim's buffer
  numbering) of the (i+1)th buffer displayed in the current statusline. This
  can be used to implement things like the <Plug> mappings above.

-------------------------------------------------------------------------------
Variables                                                 *tbufferline-variables*

tbufferline exposes the following variable partialy because it's potentially
useful and partially because the author couldn't figure out how to avoid
exposing a window-local variable.

w:tbufferline_alternate_buffer~
  The output of evaluating bufnr('#') in this window. Useful in that it can be
  accessed from other windows via getwinvar() whereas bufnr('#') cannot (at
  least as far as the author could tell).

===============================================================================
3. License                                                  *tbufferline-license*

MIT license.

===============================================================================
4. Credits                                                  *tbufferline-credits*

Inspired by, and originally a fork of, bling's vim-bufferline.
